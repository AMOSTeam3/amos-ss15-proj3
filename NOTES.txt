=========================================================
Things to note if you intend to work with this code base:
=========================================================

 - None of the classes belonging to ReqTracker itself are threadsafe, even
   though some code in the current application accesses them concurrently.

 - The gui code has a very non-trivial control flow, that also currently leads
   to all gui elements being initialized twice
   (see https://github.com/uv48uson/amos-ss15-proj3/issues/121).

 - While some parts of the application were redesigned to use paths in the
   current HEAD commit, some others use (by now deprecated) logic that
   aggregates over the set of all diffs that were ever commited, most notably
   the tracibility matrix functionality is still using the old CommitFile class.

 - The current code contains no possibility of generating database tables and
   the content of the requirements table (which is needed for requirement titles
   and descriptions).

 - The current logic for querying sources of linkage is both quite slow and
   complex, refactoring that part of the code base will require a large effort
   (essentially a rewrite) but is needed for extensibility.

======================
Important open issues:
======================

 - If large amounts of data were to be stored in the database, performance would
   suffer, because currently the code uses one Hibernate session per query
   (see https://github.com/uv48uson/amos-ss15-proj3/issues/87).

 - Warm-up of the application takes quite some time, because it executes the
   equivalent of a `git blame` on each file under version control. The only way
   to really fix this would be an intelligent persistent cache, but there was no
   time to implement such a thing.

 - The current implementation of tracking changes has no respect for line
   boundaries and will in case of ambiguities sometimes choose a diff with more
   changed lines than strictly necessary
   (see https://github.com/uv48uson/amos-ss15-proj3/issues/112).
